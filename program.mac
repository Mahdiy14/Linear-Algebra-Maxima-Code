
 to_matrix(L):=block(
    if matrixp(L) then L
    else apply('matrix,L)
 )$

check_row_echelon(A) := block(
    [rows, cols, pivots, i, j, is_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_echelon: true,
    
      for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_echelon: false,
            pivots: endcons(j, pivots)
        )
    ),
    is_echelon
)$

check_reduced_row_echelon(A) := block(
    [rows, cols, pivots, i, j , k, is_reduced_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_reduced_echelon: true,
    
    for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_reduced_echelon: false,
            pivots: endcons(j, pivots),
            if B[i][j] # 1 then is_reduced_echelon: false,
            for k:1 thru rows do (
                if k # i and B[k][j] # 0 then is_reduced_echelon: false
            )
        )
    ),
    is_reduced_echelon
)$

check_permutation(A) := block(
    [B,rows,cols,is_permutation , i,j , count_ones_row , count_ones_col],
    B : to_matrix(A),
    rows : length(B),
    cols : length(B[1]),
    is_permutation : true,

    if rows # cols then return(false),
    for i:1 thru rows do(
        count_ones_row : 0,
        for j:1 thru cols do(
            if B[i][j] = 1 then count_ones_row : count_ones_row+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_row # 1 then is_permutation : false
    ),
    for j:1 thru cols do(
        count_ones_col : 0,
        for i:1 thru cols do(
            if B[i][j] = 1 then count_ones_col : count_ones_col+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_col # 1 then is_permutation : false
    ),
    is_permutation
)$

check_elementary(A) := block(
    [n, type: 0, I, i, j, k, diff_rows, scalar, found, diag_zero],
    
    if not matrixp(A) then return(0),
    B : to_matrix(A),
    n: length(B),
    if n # length(B[1]) then return(0),
    
    
    I: ident(n),
    
    if B = I then (
        return(1)
    ),
    

    diff_rows: [],
    for i:1 thru n do (
        if B[i] # I[i] then diff_rows: endcons(i, diff_rows)
    ),
    

    if length(diff_rows) = 2 then (
        [i, j]: [diff_rows[1], diff_rows[2]],
        if B[i] = I[j] and B[j] = I[i] then (
            return(3)
        )
    )
    else if length(diff_rows) = 1 then (
        i: diff_rows[1],
        scalar: B[i][i],
        if scalar = 0 then(
             return(0)
        ),
        if scalar # 1 and B[i] = I[i] * scalar then (
            return(1)
        ),
        found: false,
        for k:1 thru n while not found do (
            if k # i and B[i] = I[i] + I[k] * B[i][k] then (
                found: true,
                print("2"),
                return(2)
            )
        )
    ),
    
    0
)$